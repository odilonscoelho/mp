#!/bin/zsh
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
mpd.pids ()
{
	ps aux|grep '[m]'p\ mpd\ start|awk '{print $2}'
}
mpd ()
{
	case $@ in
		start )
			val;;
		stop )
			kill "${(f)$(mpd.pids)[@]}";;
		* )
			msg "Options: 
			mp mpd start
			mp mpd stop";;
		esac
}
val ()
{
	if [[ `wc -l <<< "$(mpd.pids)"` -le 3 ]]; then
		declare -x statusx="start"
		start &>/dev/null &
	else
		return 0
	fi
}
start () 
{
	`backend`
	interval
	declare -x statusx="restart"
	dstfy "mpd restart"
	start
}
backend () 
{
	if $(sock.ativo); then
		if [[ ${statusx} == "start" ]]; then
			if [[ -n "$(test.loaded url)" ]]; then
				option="force"
			else
				option="force"
			fi
			basepl $option;
			baseplyad $option;
			declare -x scopeold="$(playlist)"
			declare -x statusx="ativo"
			interval
			polybar-msg hook mpv 2
			backend
		elif [[ ${statusx} == "restart" ]]; then
			declare -x statusx="ativo"
			dstfy "Restart MPD!"
			# polybar-msg hook mpv 2
			interval
			backend
		elif [[ ${statusx} == "inativo" ]]; then
			if [[ -n "$(test.loaded url)" ]]; then
				option="force"
			else
				option="force"
			fi
			[[ "$scopeold" != "$(playlist)" ]] && { basepl $option && baseplyad $option }
			declare -x statusx="ativo"
			declare -x scopeold="$(playlist)"
			polybar-msg hook mpv 2
		else
			if [[ "$scopeold" != "$(playlist)" ]]; then
				if [[ $(wc -c <<< "$scopeold") != "$(playlist |wc -c)" ]]; then
					basepl event
					baseplyad event
					declare -x scopeold="$(playlist)"
					polybar-msg hook mpv 2
				else
					declare -x scopeold="$(playlist)"
					polybar-msg hook mpv 2
				fi
			fi
		fi
		interval
		backend
	else
		if [[ $statusx == "ativo" ]]; then
			[[ -n "$(test.loaded url)" ]] && declare -x carga="$(test.loaded url)"
			declare -x statusx="inativo"
			declare -x scopeold="$(playlist)"
			polybar-msg hook mpv 1
		elif [[ $statusx == "start" ]]; then
			declare -x statusx="inativo"
			polybar-msg hook mpv 1
		fi
		interval
		backend
	fi
}
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
baseplyad ()
{
	base
	case $@ in
	null ) return 0;;
	event ) return 0 ;;
	force || ajuste )
	    rm -f /tmp/plistyad
	    i=1
	    while read line; do
			echo "$i\n$line" >> /tmp/plistyad
			i=$(( $i + 1 ))
	    done < $mptitles;;
	esac
}
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
base ()
{
	case "$@" in
		null ) return 0;;
		force || event || ajuste )
			< /tmp/mpurls > /tmp/mpurlsold
			test.loaded url > /tmp/mpurls;;
	esac

	[[ -e /tmp/mptitles ]] && \
		declare -x mptitles=/tmp/mptitles || \
			{ touch /tmp/mptitles; declare -x mptitles=/tmp/mptitles }
	declare -x mpurls=/tmp/mpurls
	declare -x fmpurlold=$(wc -l < /tmp/mpurlsold|grep -Ev '^$')
	declare -x fmpurl=$(wc -l < /tmp/mpurls|grep -Ev '^$')
}
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
basepl ()
{
	base "$@"
	case "$@" in
		null ) return 0;;
		force )
		    rm -f $mptitles
		    i=0
		    j=1
		    while read line; do
				filename=$(filenameN $i)
				if [[ -e "$filename" ]]; then
					dstfy "$filename - Arquivos locais"
					title=$(echo "$line" |sed 's/.*\///g;s/\///g')
					echo $title >> $mptitles
					echo "$j\n$title" >> /tmp/plistyad
				else
					dstfy "$filename - URLs"
					titlepl=$(test.loaded title $j)
					filenamepl=$(test.loaded url $j)
					if [[ "$filenamepl" == "$filename" && -n "$titlepl" ]]; then
						title=$titlepl
						dstfy "Título = $titlepl reaproveitado"
					else
						title=$(get.title "$line")
						dstfy "Título = $title gerado"						
					fi
					echo $title >> $mptitles
					echo "$j\n$title" >> /tmp/plistyad
				fi
				i=$(( $i + 1 ))
				j=$(( $j + 1 ))
		    done < $mpurls;;
		event )
		    wq notificatime 5000 "EVENT PLIST"
		    if [[ $fmpurl -gt $fmpurlold ]]; then
				for (( i=$(( $fmpurlold + 1 )); i<=$fmpurl; i++ ))
				{
					filename=$(filenameN $(( $i - 1 )))
					if [[ -e $filename ]]; then
						title=$(echo "$(< $mpurls|sed -n ''$i'p')" |sed 's/.*\///g;s/\///g') 
						echo $title >> $mptitles
						echo "$i\n$title" >> /tmp/plistyad
					else
						title=$(titleN $(( $i - 1 )))
						if [[ $title == "null" ]]; then
							titlepl=$(test.loaded title $i)
							if [[ -z "$titlepl" ]]; then
								title=$(get.title "$(< $mpurls|sed -n ''$i'p')")
								echo $title >> $mptitles
								echo "$i\n$title" >> /tmp/plistyad
							else
								echo $titlepl >> $mptitles
								echo "$i\n$titlepl" >> /tmp/plistyad
							fi
						else
							echo $title >> $mptitles
							echo "$i\n$title" >> /tmp/plistyad
						fi
					fi	
				}
		    else
				return 0
		    fi;;
		ajuste )
		    wq notificatime 5000 "AJUSTANDO PLAYLIST"
		    rm -f $mptitles
		    i=0
		    j=1
			while read line; do
				filename=$(filenameN $i)
				if [[ -e $filename ]]; then
					title=$(echo "$line" |sed 's/.*\///g;s/\///g')
					echo $title >> $mptitles
					echo "$j\n$title" >> /tmp/plistyad
				else
					titlepl=$(test.loaded title $j)
					filenamepl=$(test.loaded url $j)
					[[ $filenamepl == $filename && -n $titlepl ]] && title=$titlepl || title=$(get.title "$line")
					echo $title >> $mptitles
					echo "$j\n$title" >> /tmp/plistyad
				fi
				i=$(( $i + 1 ))
				j=$(( $j + 1 ))
		    done < $mpurls;;
	esac
}
